{
  
    
        "post0": {
            "title": "High Precision 6D Orbit Propagator",
            "content": "## 1. Orbit Propagator This blog post introduces a high precision 6D orbit propagator that I developed for my research. This 6D orbit propagator leverages Orekit low-level spaceflight dynamics library (3D dynamics only) and CNES VTS (Celestia) visualization tool. Below is the structure of the 6D flight dynamics library is presented in Figure 1. ![Figure 1](my_icons/propagator.png) &lt;center&gt;Figure 1: Layout of the proposed high precision 6D orbit propagator.&lt;/center&gt; There are **6 classes** that handles associated tasks. **State class** contains all functions and variables that defines the physical shape, size, and material properties of space objects, celestial bodies, frame definitions and conversions. **Force class** includes functions that compute the conservative, such as non-aspherical grvitational potential and third-body mass, and non-conservative forces, such as solar radiation pressure and air drag. **Torque class** contains functions for computing gravity gradient torque for conservative forces and solar radiation pressure and air drag torque for non-conservative forces. **Propagator class** includes functions to propagate the orbital equations of motion in Newtonian formalism using adaptive numerical integrators such as Runge-Kutta integrator of order 8 or Dormand and Prince of order 8. **Visibility class** contain the functions for various methods to compute the bidirectional reflectance distribution function (BRDF) of space objects based on visibility geometry. All reference frames use the **IERS 2010 conventions** and earth orientation parameters (EOP) are updated regularly. ## 2. Demo Setup For the demo, two extremes cases in terms of sensitivity of the space objects to non-gravitational force, namely massive **cannonball** and a small **MLI-type material that is wrinkled**. **Cannonball** is less sensitive to non-gravitaional forces, whereas non-gravitaional forces and torques drastically effect the attitude/orbit evolution of **high area-to-mass ratio wrinkled sheet**, which is composed of 10 flat surfaces. Figure 2 shows the shapes of the space objects that are selected for the demo. Table 1 shows some of the physical parameters used for the demo. In Table 1, $d$ and $s$ are fractions of the diffuse and specular reflection ($s+d=1$), $ rho$ and $F_{0}$ are diffuse reflectance and specular reflectance of the surface at normal incidence, and $n_{u}$ and $n_{v}$ are phong-like exponents that control the shape of the specular lobe. ![Figure 1](my_icons/shapes.png) &lt;center&gt;Figure 2 : Shapes of cannonball and HAMR object that are used for the demo.&lt;/center&gt; Properties|Cannonball | HAMR object | -|- Mass|7850 kg | 0.0001125 kg Area|1.209 $m^2$ | 0.0025 $m^2$ (each facet) Sunlight intensity|455 $W/m^2$|455 $W/m^2$ d|1.0|0.5 s|0.0|0.5 $ rho$|0.26|0.26 $F_{0}$|-|0.5 $n_{u}$|-|0.5 $n_{v}$|-|0.5 &lt;center&gt;Table 1 : Physical model parameters used for the space objects.&lt;/center&gt; For the initial orbit, the orbital elemets of a CubeSat (BRMM) are used by transforming TEME to J2000 reference frames. First, a two-line element set is fetched from spacetrack.org, and the state at epoch is converted to J2000. The TLE used is , **0 OPS 5111** **1 10684U 78020A 20110.24021950 +.00000083 +00000-0 +00000-0 0 9994** **2 10684 063.0042 120.7837 0079708 206.3069 153.3306 01.98073183291879** The air drag coefficient is $2.8$ (for both objects) and aspherical gravitational potential order and degree is 20. The initial rotation rate for HAMR object is $0.5$ degrees/s around the orbital normal axis. ## 3. Results Figure 3 and Figure 4 shows the light intensity observed by the ground telescope for hamr object and cannonball respectively. Figure 5 shows the relative orbital evolution starting from epoch. ![Figure 1](my_icons/flux_hamr.png) &lt;center&gt;Figure 3 : Light intensity observed by the ground telescope for hamr object.&lt;/center&gt; ![Figure 1](my_icons/flux_cannonball.png) &lt;center&gt;Figure 4 : Light intensity observed by the ground telescope for cannonball.&lt;/center&gt; ![Figure 1](my_icons/relative_orbit.png) &lt;center&gt;Figure 5 : Relative orbital evolution of space objects.&lt;/center&gt; The 3D visualisation for the relative motion (orbits diverge because hamr object is drastically perturbed by the non-gravitational forces) can be reached at https://drive.google.com/file/d/1FeZUaFtIT5W8D5UL9v2Mr_PMCZL0Nqz8/view?usp=sharing, and the visible pass (visible pass occurs when the ground observer is in dark and space object is in sun light) at https://drive.google.com/file/d/14F6Q6MH2FCJmfes40f9W3-kjYU7av1Ee/view?usp=sharing. ## 4. References [1] Space-track.org (fetched TLE for the initial orbit), https://www.space-track.org/auth/login [2] Orekit (used for frame transformations and gravitational potential computations), https://www.orekit.org/ [3] CNES VTS (used for 3D visualisation), https://timeloop.fr/vts/ [4] Ashikhmin, Michael and Shirley, Peter, An Anisotropic Phong BRDF Model, Journal of Graphics Tools, 2000. ## 5. Code The code used to generate above analysis is provided below. . # Call the required libraries import seaborn as sns import numpy as np from matplotlib import pyplot from state import State from visibility import LambertianSphere # Replace ashikhminPremoze with LambertianSphere for cannonball from forces import NeutralDrag from forces import HolmesFeatherstoneGravity from forces import ThirdBodyForce from forces import ImprovedRadiation from torques import Torques from torques import GravityGradient from torques import MagneticDipole from propagator import NumericalPropagator from sgp4.io import twoline2rv from sgp4.earth_gravity import wgs84 import utils as utl . # Initial orbit is transformed from TLE mean elements in TEME to cartesian states in J2000. TLE=[] TLE.append(&#39;0 OPS 5111&#39;) TLE.append(&#39;1 10684U 78020A 20110.24021950 +.00000083 +00000-0 +00000-0 0 9994&#39;) TLE.append(&#39;2 10684 063.0042 120.7837 0079708 206.3069 153.3306 01.98073183291879&#39;)#Eccentricity modified satellite = twoline2rv( TLE[1],TLE[2],wgs84) tlepos = satellite.propagatemin(0)[0] tlevel = satellite.propagatemin(0)[1] tleTime = str(satellite.epoch.strftime(&quot;%Y-%m-%dT%H:%M:%S.%f&quot;)[0:-3]) state = np.array([tlepos[0],tlepos[1],tlepos[2],tlevel[0],tlevel[1],tlevel[2]])*1000.0 stateNew = utl.rotateFrame(tleTime,state,&#39;TEME&#39;,&#39;J2000&#39;) . # The configuration for Steel cannonball all diffusive and HAMR object with diffuse and specular reflection spacecraftConfig = {} spacecraftConfig[&#39;name&#39;] = &#39;Steel&#39; spacecraftConfig[&#39;type&#39;] = &#39;3DoF&#39;#6DoF or 3DoF spacecraftConfig[&#39;mass&#39;] = 7850#kg spacecraftConfig[&#39;date&#39;] = tleTime#UTC time spacecraftConfig[&#39;orbit&#39;] = np.array([stateNew[0] ,stateNew[1] ,stateNew[2], stateNew[3] ,stateNew[4] ,stateNew[5]])#PV in m and m/s (J2000) # Below is requred for 3DoF propagation - change type to 3DoF as well spacecraftConfig[&#39;radius&#39;] = 0.6204#m spacecraftState = State(spacecraftConfig) # # Below is the configuration for a HAMR object # spacecraftConfig[&#39;name&#39;] = &#39;Hamr&#39; # spacecraftConfig[&#39;type&#39;] = &#39;6DoF&#39;#6DoF or 3DoF # spacecraftConfig[&#39;mass&#39;] = 0.0001125#kg # spacecraftConfig[&#39;date&#39;] = tleTime#UTC time # spacecraftConfig[&#39;orbit&#39;] = np.array([stateNew[0] ,stateNew[1] ,stateNew[2], # stateNew[3] ,stateNew[4] ,stateNew[5]])#PV in m and m/s (J2000) # # Below is requred for 3DoF propagation - change type to 3DoF as well # spacecraftConfig[&#39;radius&#39;] = 0.3#m # # Below is requred for 6DoF propagation - change type to 6DoF as well # spacecraftConfig[&#39;attitude&#39;] = np.array([20.0,20.0,0.0,0.0,0.0,0.5])#omega and omega dot w.r.t orbit frame # spacecraftConfig[&#39;moi&#39;] = np.array([[1.54180631e-07, 0.0, -1.08223763e-07], # [0.0, 2.31268163e-07, 0.0], # [-1.08223763e-07, 0.0, 8.41187813e-08]])#m^2 w.r.t body frame # spacecraftConfig[&#39;magDipole&#39;] = np.array([0.01,0.01,0.01])#Nm/Tesla = Am^2 # spacecraftConfig[&#39;comOffset&#39;] = np.array([0.0,0.0,0.0])#m w.r.t body frame # spacecraftConfig[&#39;centerOfPressure&#39;] = np.array([[0.0,0.0,0.0558 ,0.0558 ,0.02165 ,0.02165 , # -0.02165,-0.02165,-0.0558 ,-0.0558], # [0.0,0.0,0.0 ,0.0 ,0.0 ,0.0 , # 0.0 ,0.0 ,0.0 ,0.0], # [0.0,0.0,0.07165,0.07165,0.0375 ,0.0375 , # -0.0375 ,-0.0375 ,-0.07165 ,-0.07165]]) # # location of facet center w.r.t body frame - meters # spacecraftConfig[&#39;areaOfFacets&#39;] = np.array([0.0025,0.0025,0.0025,0.0025,0.0025,0.0025,0.0025,0.0025, # 0.0025,0.0025]) # # area of each facet - meters^2 # spacecraftConfig[&#39;orientationOfFacets&#39;] = np.array([[0.0,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ], # [0.0,180.0,30.0 ,210.0,60.0,240.0,60.0,240.0,30.0,210.0], # [0.0,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ]]) # # orientation of the facet w.r.t body frame - degrees # spacecraftState = State(spacecraftConfig) . # Defines the airdrag parameters dragCoeff = 2.8 dragNeutral = NeutralDrag(spacecraftState,dragCoeff) . # Defines the aspherical gravitational potential parameters order = 20 degree = 20 gravity = HolmesFeatherstoneGravity(spacecraftState,order,degree) . # Defines the third-bosy mass interaction parameters sunBody = spacecraftState.sun moonBody = spacecraftState.moon thirdBodies = ThirdBodyForce(spacecraftState,[sunBody,moonBody]) . # Defines the visibility parameters gs = [57.0, -5.0, 606.0]#latitude, longitude, altitude brdfCoeff = {} brdfCoeff[&#39;cSunVis&#39;] = 455#W/m^2 brdfCoeff[&#39;d&#39;] = 0.5 brdfCoeff[&#39;rho&#39;] = 0.26 brdfCoeff[&#39;s&#39;] = 0.5 brdfCoeff[&#39;Fo&#39;] = 0.5 brdfCoeff[&#39;nu&#39;] = 0.5 brdfCoeff[&#39;nv&#39;] = 0.5 # AshikhminPremoze = ashikhminPremoze(spacecraftState,gs,brdfCoeff) # Below is when cannonball option LambertianSphere = LambertianSphere(spacecraftState,gs,brdfCoeff) . # SRPClassical = ClassicalRadiation(spacecraftState,brdfCoeff) . # Initializes the SRP force class emissivity = 0.05 SRPImproved = ImprovedRadiation(spacecraftState,brdfCoeff,emissivity) . # Initializes the torque classes # aeroTorque = Torques(spacecraftState,dragNeutral) # radiationTorque = Torques(spacecraftState,SRPImproved) # ggTorque = GravityGradient(spacecraftState,[])#No need for a force Model # magneticTorque = MagneticDipole(spacecraftState,[])#No need for a force Model . # Defines the propagator #prop = NumericalPropagator(8640.0,100.0,spacecraftState,&#39;dop853&#39;, # [dragNeutral,gravity,thirdBodies,SRPClassical], # [aeroTorque,radiationTorque,ggTorque,magneticTorque]) # prop = NumericalPropagator(86400.0,10.0,spacecraftState,&#39;dop853&#39;, # [dragNeutral,gravity,thirdBodies,SRPImproved], # [aeroTorque,radiationTorque],ashikhminPremoze) # prop = NumericalPropagator(86400.0,10.0,spacecraftState,&#39;dop853&#39;, # [dragNeutral,gravity,thirdBodies,SRPImproved], # [],AshikhminPremoze) prop = NumericalPropagator(86400.0,10.0,spacecraftState,&#39;dop853&#39;, [dragNeutral,gravity,thirdBodies,SRPImproved], [],LambertianSphere) . # Propagate the orbit/attitude prop.Propagate() . # Keep steel data dataSteel = prop.sol[&#39;state&#39;][:,:6] # dataHamr = prop.sol[&#39;state&#39;][:,:6] . # Plots the flux seen by the ground observer selected = prop.sol[&#39;visibility&#39;][:,2]&gt;np.zeros(len(prop.sol[&#39;visibility&#39;][:])) desired = np.where(selected) startIndex = desired[0][0] endIndex = desired[0][-1] sns.set() print(&#39;Below plot is flux when start time : &#39; +str(prop.sol[&#39;time&#39;][startIndex]) + &#39; and end time : &#39;+str(prop.sol[&#39;time&#39;][endIndex])+&#39; (Cannonball object)&#39;) pyplot.plot(prop.sol[&#39;visibility&#39;][startIndex:endIndex,1]) pyplot.xlabel(&#39;Time (x10 seconds)&#39;) pyplot.ylabel(&#39;Flux (W/m^2)&#39;) pyplot.show() . Below plot is flux when start time : 2020-04-19T21:17:04.964 and end time : 2020-04-19T22:55:24.964 (Cannonball object) . # Plots the flux seen by the ground observer selected = prop.sol[&#39;visibility&#39;][:,2]&gt;np.zeros(len(prop.sol[&#39;visibility&#39;][:])) desired = np.where(selected) startIndex = desired[0][0] endIndex = desired[0][-1] sns.set() print(&#39;Below plot is flux when start time : &#39; +str(prop.sol[&#39;time&#39;][startIndex]) + &#39; and end time : &#39;+str(prop.sol[&#39;time&#39;][endIndex])+&#39; (HAMR object)&#39;) pyplot.plot(prop.sol[&#39;visibility&#39;][startIndex:endIndex,1]) pyplot.xlabel(&#39;Time (x10 seconds)&#39;) pyplot.ylabel(&#39;Flux (W/m^2)&#39;) pyplot.show() . Below plot is flux when start time : 2020-04-19T21:17:04.964 and end time : 2020-04-19T22:55:24.964 (HAMR object) . # Compute the relative orbit trajectory lenData = dataHamr.shape[0] relTrajectory = np.zeros((lenData,3)) posvel = np.zeros(6) for cnt1 in range(lenData): posvel[0:3] = dataSteel[cnt1,:3] posvel[3:6] = dataSteel[cnt1,3:] rotMatIne2Orb = utl.OrbitFrameAxes(posvel).T relTrajectory[cnt1,:] = np.dot(rotMatIne2Orb,dataHamr[cnt1,:3]-dataSteel[cnt1,:3])/1000.0 . # Plots the relative orbit trajectory pyplot.plot(relTrajectory[:,0],&#39;r&#39;,markersize=0.1, label=&quot;Along-Track&quot;) pyplot.plot(relTrajectory[:,1],&#39;g&#39;,markersize=0.1, label=&quot;Nadir&quot;) pyplot.plot(relTrajectory[:,2],&#39;b&#39;,markersize=0.1, label=&quot;Neg. Orbit Normal&quot;) pyplot.xlabel(&#39;Time (x10 seconds)&#39;) pyplot.ylabel(&#39;Reative Distance (km)&#39;) pyplot.legend(loc=&#39;center left&#39;, bbox_to_anchor=(1, 0.5)) pyplot.show() . # utl.createVTSSim(&#39;hamr&#39;, prop.sol[&#39;time&#39;], prop.sol[&#39;state&#39;][:,0:10], &#39;6DoF&#39;) utl.createVTSSim(&#39;steel&#39;, prop.sol[&#39;time&#39;], prop.sol[&#39;state&#39;][:,0:10], &#39;3DoF&#39;) .",
            "url": "https://rasitabay.github.io/blog/2020/04/21/6D-Orbit-Propagator.html",
            "relUrl": "/2020/04/21/6D-Orbit-Propagator.html",
            "date": " • Apr 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rasitabay.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rasitabay.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rasitabay.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rasitabay.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}